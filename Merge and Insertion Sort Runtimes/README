Program Name: Homework 1 Problem 3 and Problem 4a
Author: Ryan Wells Farran
Class: CS 325 400 S2019 (Analysis of Algorithms) | Date: 10/07/2019 | Saturday, October 7th 2019

HOW TO RUN AND COMPILE PROGRAM (for TAs):
	 STEP 1: place unzipped file's contents into the desired directory on the School's Flip server.
			a. place desired data.txt file into the same directory as the unzipped
			b. altenratively, rename the data_example.txt file to data.txt
 	 STEP 2: from the directory, type the "make" command and then hit enter to compile the program.
	 STEP 3: from the same directory, type "output" and then hit enter to run the program.
	 STEP 4: after being greeted, enter 1 to START or 2 to EXIT the program.
	 STEP 5: from here the user has four options:
	 	 1. Sort data.txt using MERGE SORT.
	 	 2. Sort data.txt using INSERTION SORT.
	 	 3. Test MERGE and INSERTION sort runtimes.
	 	 4. QUIT (back to START/EXIT).
	 STEP 6: after each selection, the user will continue to be prompted to select an option 1 - 4 until 4 is selected.
	 STEP 7: check the directory for the file(s) merge.txt and/or insert.txt to ensure data.txt has been sorted correctly. 



Problem 3
Description: Implement merge sort and insertion sort to sort an array/vector of integers.
  Name the programs “mergesort” and “insertsort”. Your programs should be able to read
  inputs from a file called “data.txt” where the first value of each line is the number of
  integers that need to be sorted, followed by the integers.


Example values for data.txt:
   4 19 2 5 11
   8 1 2 3 4 5 6 1 2

The output will be written to files called “merge.txt” and “insert.txt”.
For the above example the output would be:
   2 5 11 19
   1 1 2 2 3 4 5 6

Problem 4.a
Description: a) Modify code- Now that you have verified that your code runs correctly using the data.txt
  input file, you can modify the code to collect running time data. Instead of reading arrays from
  the file data.txt and sorting, you will now generate arrays of size n containing random integer
  values from 0 to 10,000 to sort. Use the system clock to record the running times of each
  algorithm for ten different values of n for example: n = 5000, 10000, 15000, 20,000, …, 50,000.
  You may need to modify the values of n if an algorithm runs too fast or too slow to collect the
  running time data (do not collect times over a minute). Output the array size n and time to the
  terminal. Name these new programs insertTime and mergeTime. 

